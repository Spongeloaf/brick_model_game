using Godot;
using System.Collections.Generic;
using System.IO;
using CsvHelper;
using System.Globalization;

public partial class AnchorGenerator : Node
{
    private List<AnchorDefinition> m_anchors = new List<AnchorDefinition>();
    private readonly string m_outputResourcePath = "res://models/ldraw/parts/";
    private readonly string m_csvResourcePath = "res://models/customParts/anchor_list.csv";
    private readonly string m_anchorTemplateResourcePath = "res://models/customParts/anchor_template.txt";

    private readonly string m_enumName = "ModelTypes";

    private string m_outputPath;
    private string m_csvPath;
    private string m_anchorTemplatePath;

    private struct AnchorCsvEntry
    {
        public string name { get; set; }
        public string description { get; set; }
    }

    private class AnchorDefinition
    {
        public string filename;
        public string enumName;
        public string description;
    }

    public override void _Ready()
    {
        // This function generates model anchors from a .csv file.
        // It outputs three things:
        // 1. An Ldraw part file for each anchor
        // 2. A file contians an enum for each anchor
        // 3. A dictionary file for mapping anchor part files to enums

        if (!ValidateInputFiles())
            return;

        ReadAnchorDefinitionFile();
        GeneratePartFiles();
        GenerateEnumFile();
        GenerateEnumDictionaryFile();
        GetTree().Quit();
    }

    private void ReadAnchorDefinitionFile()
    {
        using (var reader = new StreamReader(m_csvPath))
        using (var csv = new CsvReader(reader, CultureInfo.InvariantCulture))
        {
            IEnumerable<AnchorCsvEntry> records = csv.GetRecords<AnchorCsvEntry>();
            foreach (AnchorCsvEntry anchorCsv in records)
            {
                AnchorDefinition anchor = CreateAnchor(in anchorCsv);
                if (anchor == null)
                    continue;

                m_anchors.Add(anchor);
            }
        }
    }

    private bool ValidateInputFiles()
    {
        m_csvPath = ProjectSettings.GlobalizePath(m_csvResourcePath);
        m_anchorTemplatePath = ProjectSettings.GlobalizePath(m_anchorTemplateResourcePath);
        m_outputPath = ProjectSettings.GlobalizePath(m_outputResourcePath);

        if (!System.IO.File.Exists(m_csvPath) || !System.IO.File.Exists(m_anchorTemplatePath))
        {
            OmniLogger.Error("AnchorGenerator: Could not find anchor_list.csv");
            return false;
        }

        return true;
    }

    private void GeneratePartFiles()
    {
        string templateContents = File.ReadAllText(m_anchorTemplatePath);
        foreach (AnchorDefinition anchor in m_anchors)
        {
            if (anchor.enumName == "invalid")
                continue;

            string partContents = GeneratePartFileHeader(anchor);
            partContents += templateContents;
            File.WriteAllText(m_outputPath + "\\" + anchor.filename, partContents);
        }
    }

    private static string GeneratePartFileHeader(AnchorDefinition anchor)
    {
        string header = $"0 FILE {anchor.filename}\r\n";
        header += $"0 Description: {anchor.description}\r\n";
        header += $"0 Name: {anchor.enumName.Replace("_", " ")}\r\n";
        header += $"0 Author: Spongeloaf\r\n";
        return header;
    }

    private void GenerateEnumFile()
    {
        if (m_anchors.Count == 0)
            return;

        string enumFile = string.Empty;
        enumFile += "// This file was generated by AnchorGenerator.cs\r\n";
        enumFile += "namespace Ldraw\r\n{\r\n";

        string modelAnchors = $"public enum {m_enumName}";
        modelAnchors += "\n{\r\n";

        foreach (AnchorDefinition anchor in m_anchors)
            modelAnchors += $"{anchor.enumName},\r\n";

        modelAnchors += "};\r\n";
        enumFile += modelAnchors;
        enumFile += "}\r\n";

        string enumFilePath = ProjectSettings.GlobalizePath("res://source/LdrawLoader/AnchorEnums.cs");
        File.WriteAllText(enumFilePath, enumFile);
    }

    private static AnchorDefinition CreateAnchor(in AnchorCsvEntry anchorCsv)
    {
        if (string.IsNullOrEmpty(anchorCsv.name))
            return null;

        AnchorDefinition anchor = new AnchorDefinition();

        // The "anchor.dat" suffix makes it easy to search for the files
        anchor.filename = $"mwg_{anchorCsv.name}_anchor.dat";   
        anchor.enumName = anchorCsv.name;
        anchor.description = anchorCsv.description;
        return anchor;
    }

    private void GenerateEnumDictionaryFile()
    {
        if (m_anchors.Count == 0)
            return;

        string dictFile = string.Empty;
        dictFile += "// This file was generated by AnchorGenerator.cs\r\n";
        dictFile += "using System.Collections.Generic;\r\n";
        dictFile += "namespace Ldraw\r\n{\r\n";
        dictFile += "public static class Anchors\n{\n";
        string modelDict = $"public static readonly Dictionary<string, {m_enumName}> kModelAnchors = new()";
        modelDict += "\r\n{\r\n";
        
        foreach (AnchorDefinition anchor in m_anchors)
        {
            if (anchor.enumName == "invalid")
                continue;

            modelDict += $"{{ \"{anchor.filename}\", {m_enumName}.{anchor.enumName} }},\r\n";
        }

        modelDict += "};\r\n";
        dictFile += modelDict;
        dictFile += "}\r\n";
        dictFile += "}\r\n";

        string enumFilePath = ProjectSettings.GlobalizePath("res://source/LdrawLoader/AnchorDict.cs");
        File.WriteAllText(enumFilePath, dictFile);
    }

}
